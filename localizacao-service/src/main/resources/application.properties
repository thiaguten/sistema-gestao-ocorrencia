spring.application.name=localizacao-service
spring.profiles.active=${PROFILE_CONFIG:default}

server.port=8000

logging.level.root=error
logging.level.br.com.thiaguten.microservices=debug
logging.level.org.springframework.security.web.csrf=debug

eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka

management.endpoints.web.exposure.include=*

resilience4j.circuitbreaker.circuit-breaker-aspect-order=1
resilience4j.circuitbreaker.instances.api-cep.minimum-number-of-calls=5
resilience4j.circuitbreaker.instances.api-cep.slow-call-duration-threshold=5000
resilience4j.circuitbreaker.instances.api-cep.wait-duration-in-open-state=30000

spring.sleuth.sampler.probability=1.0
## Sleuth => HTTP => Zipkin
#spring.zipkin.baseUrl=http://localhost:9411/
## Sleuth => RabbitMQ => Zipkin
spring.zipkin.sender.type=rabbit
spring.rabbitmq.host=localhost

cep.api.baseUrl=https://ws.apicep.com
cep.api.path=/cep
cep.api.timeout=10s

# Informar, opcionalmente, o issue-uri representa uma medida de segurança adicional para validar o emissor dos tokens (que é o Servidor de Autorização).
# Entretanto, acrescentar esta propriedade também exige que o Servidor de Autorização esteja em funcionamento antes que possamos iniciar a aplicação.
#spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/auth/realms/sgo

# A propriedade jwk-set-uri aponta para a URI contendo a chave pública para que a aplicação possa verificar a integridade do token.
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8080/auth/realms/sgo/protocol/openid-connect/certs

spring.data.mongodb.uri=mongodb://user_sgo:Sg0p%40SsWd@localhost:27017/db_sgo
