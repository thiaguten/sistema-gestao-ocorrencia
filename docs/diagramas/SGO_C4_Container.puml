@startuml SGO_C4_Container
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5

!include FONTAWESOME/users.puml
!include DEVICONS/angular.puml
!include DEVICONS/java.puml
!include DEVICONS/mysql.puml
!include DEVICONS/mongodb.puml
!include DEVICONS/nginx.puml

title Diagrama de Container do Sistema de Gestão de Ocorrência

' SHOW_PERSON_OUTLINE()
SHOW_PERSON_PORTRAIT()
' LAYOUT_LEFT_RIGHT()
LAYOUT_TOP_DOWN()
' HIDE_STEREOTYPE()

AddRelTag("async", $lineStyle = DashedLine())

Person(usuario, "Usuário", "Pessoa que precisa registrar uma ocorrência.")
Person(atendente, "Atendente", "Pessoa que atende uma ocorrência.")
System_Ext(sistema_os, "Sistema de Gestão de Ordem de Serviço", "Gerencia Ordem de Serviço para execução.")
System_Ext(sistema_correios, "Sistema de Localização (Correios)", "Gerencia endereços")

System_Boundary(sgo, "Sistema de Gestão de Ocorrência") {
    Container(nginx, "Página Web", "nginx",  "Serve ativos estáticos do website para o cliente", $sprite = "nginx")
    Container(spa, "Aplicação Web (SPA)", "Javascript, Angular",  "Interface principal com a qual o usuário interage com o sistema via navegador web.", $sprite = "angular")
    Container(api_localizacao, "API de Localização", "Java, Spring Boot",  "Prover API de busca de endereço a partir de um CEP.", $sprite = "java")
    Container(api_notificacao, "API de Notificação", "Java, Spring Boot",  "Prover API para notificar usuários e sistemas.", $sprite = "java")
    Container(api_ocorrencia, "API de Ocorrência", "Java, Spring Boot",  "Prover API para acesso as funcionalidades e informações sobre ocorrências.", $sprite = "java")
    Container(api_relatorio, "API de Relatório", "Java, Spring Boot",  "Cria dados normalizados para fins de relatórios.", $sprite = "java")
    ContainerDb(db_relacional, "Banco de dados Relacional", "MySQL", "Armazena ocorrências e informações sobre usuários.", $sprite="mysql")
    ContainerDb(db_nosql, "Banco de dados NoSQL", "MongoDB", "Armazena localizações, endereço e CEPs.", $sprite="mongodb")
    ContainerQueue(queue, "Barramento de mensageria", "RabbitMQ", "Fila de transporte e processamento de eventos em segundo plano.")
    
    Rel(spa, api_localizacao, "Usa", "HTTPS")
    Rel(spa, api_ocorrencia, "Usa", "HTTPS")
    Rel(spa, api_relatorio, "Usa", "HTTPS")
    Rel(api_ocorrencia, api_localizacao, "Usa", "JSON/HTTP")
    Rel(api_localizacao, db_nosql, "Usa", "MongoDB protocolo, TCP/IP")
    Rel(api_ocorrencia, api_notificacao, "Usa", "JSON/HTTP")
    Rel(api_ocorrencia, db_relacional, "Lê e escreve em", "JDBC, TCP/IP")
    Rel(api_relatorio, db_relacional, "Lê em", "JDBC, TCP/IP")
    Rel(api_ocorrencia, queue, "Escreve ocorrências aprovadas em", "AMQP", $tags = "async")
}
Rel(usuario, nginx, "Navega no site usando", "HTTPS")
Rel(atendente, nginx, "Navega no site usando", "HTTPS")
Rel(usuario, spa, "Registra ocorrência em", "HTTPS")
Rel(atendente, spa, "Atende ocorrência em", "HTTPS")
Rel(sistema_os, queue, "Lê ocorrências aprovadas em", "AMQP", $tags = "async")
Rel(api_localizacao, sistema_correios, "Usa", "JSON/HTTPS")
Rel(api_notificacao, usuario, "Notifica o usuário via email em", "SMTP", $tags = "async")
Rel_R(api_notificacao, spa, "Notifica o usuário via sistema web em", "HTTPS")

Lay_L(usuario, atendente)
Lay_R(usuario, atendente)

@enduml